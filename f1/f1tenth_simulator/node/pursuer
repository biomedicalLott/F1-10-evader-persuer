#include <ros/ros.h>

// Publish to a topic with this message type
#include <ackermann_msgs/AckermannDriveStamped.h>
// AckermannDriveStamped messages include this message type
#include <ackermann_msgs/AckermannDrive.h>

// Subscribe to a topic with this message type
#include <nav_msgs/Odometry.h>

// for printing
#include <iostream>

// for RAND_MAX
#include <cstdlib>
#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
class Pursuer 
{
private:
    // A ROS node
    ros::NodeHandle n;

    // car parameters
    double max_speed, max_steering_angle;

    // Listen for odom messages
    ros::Subscriber odom_sub;

    // Publish drive data
    ros::Publisher drive_pub;

    // previous desired steering angle
    double prev_angle=0.0;
int counter = 0;

public:
    // Pursuer() 
    // {
    //     // Initialize the node handle
    //     n = ros::NodeHandle("~");

    //     // get topic names
    //     std::string drive_topic, odom_topic;
    //     n.getParam("rand_drive_topic", drive_topic);
    //     n.getParam("odom_topic", odom_topic);

    //     // get car parameters
    //     n.getParam("max_speed", max_speed);
    //     n.getParam("max_steering_angle", max_steering_angle);

    //     max_speed++;
    //     // Make a publisher for drive messages
    //     drive_pub = n.advertise<ackermann_msgs::AckermannDriveStamped>(drive_topic, 10);

    //     // Start a subscriber to listen to odom messages
    //     odom_sub = n.subscribe(odom_topic, 1, &Pursuer::odom_callback, this);

    
    // }


    // void odom_callback(const nav_msgs::Odometry & msg) 
    // {
    //     // publishing is done in odom callback just so it's at the same rate as the sim

    //     // initialize message to be published
    //     ackermann_msgs::AckermannDriveStamped drive_st_msg;
    //     ackermann_msgs::AckermannDrive drive_msg;

    //     /// SPEED CALCULATION:
    //     // set constant speed to be half of max speed
    //     drive_msg.speed = 2.0;


    //     /// STEERING ANGLE CALCULATION
    //     // random number between 0 and 1
    //     double random = ((double) rand() / RAND_MAX);
    //     // good range to cause lots of turning
    //     double range = max_steering_angle / 2.0;
    //     // compute random amount to change desired angle by (between -range and range)
    //     double rand_ang = range * random - range / 2.0;

    //     // sometimes change sign so it turns more (basically add bias to continue turning in current direction)
    //     random = ((double) rand() / RAND_MAX);
    //     if ((random > .8) && (prev_angle != 0)) 
    //     {
    //         double sign_rand = rand_ang / std::abs(rand_ang);
    //         double sign_prev = prev_angle / std::abs(prev_angle);
    //         rand_ang *= sign_rand * sign_prev;
    //     }

    //     // set angle (add random change to previous angle)
    //     drive_msg.steering_angle = std::min(std::max(prev_angle + rand_ang, -max_steering_angle), max_steering_angle);

    //     // reset previous desired angle
    //     prev_angle = drive_msg.steering_angle;

    //     // set drive message in drive stamped message
    //     drive_st_msg.drive = drive_msg;

    //     // publish AckermannDriveStamped message to drive topic
    //     drive_pub.publish(drive_st_msg);

    // }

}; // end of class definition


int main(int argc, char ** argv) 
{
  ros::init(argc, argv, "my_tf_listener");

  ros::NodeHandle node;

  ros::service::waitForService("spawn");
  ros::ServiceClient add_turtle =
    node.serviceClient<turtlesim::Spawn>("spawn");
  turtlesim::Spawn srv;
  add_turtle.call(srv);

  ros::Publisher turtle_vel =
    node.advertise<geometry_msgs::Twist>("turtle2/cmd_vel", 10);

  tf::TransformListener listener;

  ros::Rate rate(10.0);
  while (node.ok()){
    tf::StampedTransform transform;
    try{
     ros::Time now = ros::Time::now();
    ros::Time past = now - ros::Duration(.0);
    listener.waitForTransform("/turtle2", now,
                              "/turtle1", past,
                              "/world", ros::Duration(1.0));
    listener.lookupTransform("/turtle2", now,
                             "/turtle1", past,
                             "/world", transform);

    //   listener.lookupTransform("/turtle2", "/turtle1",
    //                            ros::Time(1), transform);
    

    }
    catch (tf::TransformException &ex) {
      ROS_ERROR("%s",ex.what());
      ros::Duration(1.0).sleep();
      continue;
    }

    geometry_msgs::Twist vel_msg;
    vel_msg.angular.z = 4.0 * atan2(transform.getOrigin().y(),
                                    transform.getOrigin().x());
    vel_msg.linear.x = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +
                                  pow(transform.getOrigin().y(), 2));
    turtle_vel.publish(vel_msg);

    rate.sleep();
  }

    ros::init(argc, argv, "random_walker");
    Pursuer rw;
    ros::spin();
    return 0;
}
